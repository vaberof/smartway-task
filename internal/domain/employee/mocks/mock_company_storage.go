// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/employee/company_storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/employee/company_storage.go -destination=internal/domain/employee/mocks/mock_company_storage.go
//

// Package mock_employee is a generated GoMock package.
package mock_employee

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCompanyStorage is a mock of CompanyStorage interface.
type MockCompanyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyStorageMockRecorder
}

// MockCompanyStorageMockRecorder is the mock recorder for MockCompanyStorage.
type MockCompanyStorageMockRecorder struct {
	mock *MockCompanyStorage
}

// NewMockCompanyStorage creates a new mock instance.
func NewMockCompanyStorage(ctrl *gomock.Controller) *MockCompanyStorage {
	mock := &MockCompanyStorage{ctrl: ctrl}
	mock.recorder = &MockCompanyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyStorage) EXPECT() *MockCompanyStorageMockRecorder {
	return m.recorder
}

// IsExists mocks base method.
func (m *MockCompanyStorage) IsExists(id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockCompanyStorageMockRecorder) IsExists(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockCompanyStorage)(nil).IsExists), id)
}
